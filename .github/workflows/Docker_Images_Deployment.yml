name: Service_deployment

on:
  workflow_dispatch:
    inputs:
      service_choice:
        description: 'Select the service to deploy (or "all" to deploy all services)'
        required: true
        type: choice
        options:
          - csv_processor_service
          - qg_service
          - qa_service
          - da_service
          - fluency_service
          - all  # Option to deploy all services

jobs:
  setup_vm:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up SSH Agent
      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.VM_KEY }}

      # Step 3: Install Qdrant and Gentle on the Azure VM
      - name: Install and Run Qdrant and Gentle using Docker
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            # Update system packages
            sudo apt-get update -y

            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Create Docker network
            docker network create my_docker_network

            # Check if Qdrant is running, if yes, skip, else pull and run it
            if docker ps --filter "name=qdrant" --filter "status=running" | grep -q qdrant; then
              echo "Qdrant is already running, skipping start."
            else
              echo "Starting Qdrant..."
              docker pull qdrant/qdrant:latest
              docker run -d --name qdrant --network my_docker_network --restart always -p 6333:6333 qdrant/qdrant:latest
            fi

            # Check if Gentle is running, if yes, skip, else pull and run it
            if docker ps --filter "name=gentle" --filter "status=running" | grep -q gentle; then
              echo "Gentle is already running, skipping start."
            else
              echo "Starting Gentle..."
              docker pull lowerquality/gentle:latest
              docker run -d --name gentle --network my_docker_network --restart always -p 8765:8765 lowerquality/gentle:latest
            fi
          EOF

  deploy_services:
    runs-on: ubuntu-latest
    needs: setup_vm
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up SSH Agent
      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.VM_KEY }}

      # Step 3: Define the services to deploy based on the input choice
      - name: Determine services to deploy
        id: deploy_services
        run: |
          if [ "${{ github.event.inputs.service_choice }}" == "all" ]; then
            echo "All services selected."
            echo "::set-output name=services::csv_processor_service,qg_service,qa_service,da_service,fluency_service"
          else
            echo "Single service selected: ${{ github.event.inputs.service_choice }}"
            echo "::set-output name=services::${{ github.event.inputs.service_choice }}"
          fi

      # Step 4: Set environment variables dynamically based on the service
      - name: Set service-specific environment variables
        run: |
          services="${{ steps.deploy_services.outputs.services }}"
          for service in $(echo $services | sed "s/,/ /g")
          do
            if [[ "$service" == "csv_processor_service" ]]; then
              echo "SERVICE_PORT=8000" >> $GITHUB_ENV
              echo "SERVICE_VOLUME='/home/azureuser:/host_data'" >> $GITHUB_ENV
            elif [[ "$service" == "qg_service" ]]; then
              echo "SERVICE_PORT=8001" >> $GITHUB_ENV
              echo "SERVICE_VOLUME='/home/azureuser/custom_qg_model_v4.pt:/app/custom_qg_model_v4.pt'" >> $GITHUB_ENV
            elif [[ "$service" == "qa_service" ]]; then
              echo "SERVICE_PORT=8002" >> $GITHUB_ENV
              echo "SERVICE_VOLUME='/home/azureuser:/host_data'" >> $GITHUB_ENV
            elif [[ "$service" == "da_service" ]]; then
              echo "SERVICE_PORT=8003" >> $GITHUB_ENV
              echo "SERVICE_VOLUME='/home/azureuser:/host_data'" >> $GITHUB_ENV
            elif [[ "$service" == "fluency_service" ]]; then
              echo "SERVICE_PORT=8004" >> $GITHUB_ENV
              echo "SERVICE_VOLUME='/home/azureuser:/host_data'" >> $GITHUB_ENV
            fi
          done

      # Step 5: Deploy each selected service to Azure VM
      - name: Deploy services to Azure VM
        run: |
          services="${{ steps.deploy_services.outputs.services }}"
          for service in $(echo $services | sed "s/,/ /g")
          do
            ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
              # Log in to Azure Container Registry
              echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_REGISTRY_URL }} --username ${{ secrets.ACR_USERNAME }} --password-stdin
      
              # Stop and remove the existing container if running
              docker stop $service || true
              docker rm $service || true
      
              # Remove old Docker image if it exists
              docker rmi -f ${{ secrets.ACR_REGISTRY_URL }}/$service:latest || true
      
              # Pull the latest Docker image for the service
              docker pull ${{ secrets.ACR_REGISTRY_URL }}/$service:latest
      
              # Run the Docker container for the service with dynamic port and volume
              docker run -d -p $SERVICE_PORT:$SERVICE_PORT --name $service --network my_docker_network --restart always -v $SERVICE_VOLUME ${{ secrets.ACR_REGISTRY_URL }}/$service:latest
            EOF
          done
